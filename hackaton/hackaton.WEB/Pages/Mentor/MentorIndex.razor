@page "/mentor"
@using hackaton.WEB.Repositories
@using hackaton.shared.Entities
@using hackaton.WEB.Shared

@inject IRepository repository
@inject SweetAlertService swal
@inject NavigationManager navigationManager

<h3>Mentors</h3>

<div class="mb-3">
    <a class="btn btn-primary" href="/mentors/create">New mentor</a>
</div>

<GenericList MyList="Mentors">
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Nombre mentor</th>
                    <th>Experiencia</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var mentor in Mentors!)
                {
                    <tr>
                        <td>@mentor.Name </td>
                        <td>@mentor.Experience</td>
                        <td>
                            <a href="/rewards/edit/@mentor.Id" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                            <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(mentor))><i class="oi oi-trash" /> Borrar</button>
                        </td>
                    </tr>
                }

            </tbody>

        </table>
    </Body>
</GenericList>

@code {
    public List<Mentor> Mentors { get; set; }


    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHppt = await repository.GetAsync<List<Mentor>>("/api/mentors");
        Mentors = responseHppt.Response!;
    }

    private async Task DeleteAsync(Mentor Mentor)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync($"api/mentors/{Mentor.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}

